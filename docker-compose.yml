version: '3.9'

########################## NETWORKS ################################
networks:
  default:
    driver: bridge
  proxy:
    name: proxy
    driver: bridge
    ipam:
      config:
        - subnet: 192.168.90.0/24

########################## EXTENSION FIELDS ########################

x-environment: &default-tz-puid-pgid
  TZ: ${TZ}
  PUID: ${PUID}
  PGID: ${PGID}

x-common-keys-core: &common-keys-core
  networks:
    - proxy
  security_opt:
    - no-new-privileges:true
  restart: always

x-common-keys-apps: &common-keys-apps
  networks:
    - proxy
  security_opt:
    - no-new-privileges:true
  restart: unless-stopped

x-common-keys-media: &common-keys-media
  networks:
    - proxy
  security_opt:
    - no-new-privileges:true
  restart: no 

############################ SERVICES ###############################
services:
  traefik:
    <<: *common-keys-core
    container_name: traefik
    image: traefik:2.7
    command:
      - --global.checkNewVersion=true
      - --global.sendAnonymousUsage=false
      - --entryPoints.http.address=:80
      - --entryPoints.https.address=:443
      # Allow these IPs to set the X-Forwarded-* headers 
      - --entrypoints.https.forwardedHeaders.trustedIPs=$CLOUDFLARE_IPS,$LOCAL_IPS
      - --entryPoints.traefik.address=:8080
      - --api=true
      - --api.insecure=true
      - --api.dashboard=true
      # - --serversTransport.insecureSkipVerify=true
      - --log=true
      - --log.filePath=/logs/traefik.log
      - --log.level=INFO # (Default: error) DEBUG, INFO, WARN, ERROR, FATAL, PANIC
      - --accessLog=true
      - --accessLog.filePath=/logs/access.log
      - --accessLog.bufferingSize=100 # Configuring a buffer of 100 lines
      - --accessLog.filters.statusCodes=204-299,400-499,500-599
      - --providers.docker=true
      - --providers.docker.endpoint=unix:///var/run/docker.sock # Use Docker Socket Proxy instead for improved security
      # - --providers.docker.endpoint=tcp://socket-proxy:2375 # Use this instead of the previous line if you have socket proxy.
      - --providers.docker.exposedByDefault=false
      - --entrypoints.https.http.tls.options=tls-opts@file
      # Add dns-cloudflare as default certresolver for all services. Also enables TLS and no need to specify on individual services
      - --entrypoints.https.http.tls.certresolver=dns-cloudflare
      - --entrypoints.https.http.tls.domains[0].main=$DOMAIN
      - --entrypoints.https.http.tls.domains[0].sans=*.$DOMAIN
      # - --entrypoints.https.http.tls.domains[1].main=$DOMAINNAME2 # Pulls main cert for second domain
      # - --entrypoints.https.http.tls.domains[1].sans=*.$DOMAINNAME2 # Pulls wildcard cert for second domain
      - --providers.docker.network=proxy
      - --providers.docker.swarmMode=false
      - --providers.file.directory=/rules # Load dynamic configuration from one or more .toml or .yml files in a directory
      # - --providers.file.filename=/path/to/file # Load dynamic configuration from a file  
      - --providers.file.watch=true # Only works on top level files in the rules folder
      # - --certificatesResolvers.dns-cloudflare.acme.caServer=https://acme-staging-v02.api.letsencrypt.org/directory # LetsEncrypt Staging Server - uncomment when testing
      - --certificatesResolvers.dns-cloudflare.acme.email=$CLOUDFLARE_EMAIL
      - --certificatesResolvers.dns-cloudflare.acme.storage=/acme.json
      - --certificatesResolvers.dns-cloudflare.acme.dnsChallenge.provider=cloudflare
      - --certificatesResolvers.dns-cloudflare.acme.dnsChallenge.resolvers=1.1.1.1:53,1.0.0.1:53
      - --certificatesResolvers.dns-cloudflare.acme.dnsChallenge.delayBeforeCheck=90 # To delay DNS check and reduce LE hitrate
    networks:
      - proxy
    ports:
      - target: 80
        published: 80 
        protocol: tcp
        mode: host
      - target: 443
        published: 443
        protocol: tcp
        mode: host
    volumes:
      - ${DAPPDATA}/traefik/rules/cloudserver:/rules
      - /var/run/docker.sock:/var/run/docker.sock
      - ${DAPPDATA}/traefik/acme/acme.json:/acme.json
      - ${DLOGS}/cloudserver/traefik:/logs
      - ${DSHARED}:/shared
    environment:
      - TZ=$TZ 
      - CF_API_EMAIL=$CLOUDFLARE_EMAIL
      - CF_API_KEY=$CLOUDFLARE_API_KEY
      - DOMAIN=$DOMAIN
    labels:
      - traefik.enable=true
      - traefik.http.routers.http-catch-all.entrypoints=https
      - traefik.http.routers.http-catch-all.rule=HostRegexp(`{host:.+}`)
      - traefik.http.routers.http-catch-all.middlewares=redirect-to-https
      - traefik.http.middlewares.redirect-to-https.redirectscheme.scheme=https
      # HTTP routers
      - traefik.http.routers.traefik-rtr.entrypoints=https
      - traefik.http.routers.traefik-rtr.rule=Host(`traefik.$DOMAIN`)
      - traefik.http.routers.traefik-rtr.tls=true
      - traefik.http.routers.traefik-rtr.tls.certresolver=dns-cloudflare
      - traefik.http.routers.traefik-rtr.tls.domains[0].main=$DOMAIN
      - traefik.http.routers.traefik-rtr.tls.domains[0].sans=*.$DOMAIN 
      - traefik.http.routers.traefik-rtr.service=api@internal
      - traefik.http.routers.traefik-rtr.middlewares.chain-basic-auth@file 
  heimdall:
    <<: *common-keys-apps
    image: lscr.io/linuxserver/heimdall:latest
    container_name: heimdall
    environment:
      <<: *default-tz-puid-pgid
    volumes:
      - $DAPPDATA/heimdall:/config
    labels:
      - traefik.enable=true
      - traefik.http.routers.heimdall.entrypoints=https
      - traefik.http.routers.heimdall.rule=Host(`$DOMAIN`, `www.$DOMAIN`)
      - traefik.http.routers.heimdall.tls=true
      - traefik.http.routers.heimdall.middlewares=chain-basic-auth@file 
      - traefik.http.routers.heimdall.service=heimdall-svc
      - traefik.http.services.heimdall-svc.loadbalancer.server.port=80
  librespeed:
    <<: *common-keys-apps
    image: lscr.io/linuxserver/librespeed:latest
    container_name: librespeed
    environment:
      <<: *default-tz-puid-pgid
    volumes:
      - $DAPPDATA/librespeed:/config
    labels:
      - traefik.enable=true
      - traefik.http.routers.librespeed.entrypoints=https
      - traefik.http.routers.librespeed.rule=Host(`speed.$DOMAIN`)
      - traefik.http.routers.librespeed.tls=true
      - traefik.http.routers.librespeed.middlewares=chain-basic-auth@file
      - traefik.http.routers.librespeed.service=librespeed-svc
      - traefik.http.services.librespeed-svc.loadbalancer.server.port=80
